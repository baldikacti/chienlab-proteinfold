// Global default params, used in configs
params {

    // Input options
    input                       = null
    outdir                      = null
    mode                        = null // {alphafold3, colabfold, boltz}

    // Colabfold mode paramaters
    top_rank                    = null
    // MSA arguments
    msa_mode = 'mmseqs2_uniref_env'
    pair_mode = null
    pair_strategy = null
    templates = null

    // Prediction arguments
    num_recycle = 3
    recycle_early_stop_tolerance = null
    num_ensemble = null
    num_seeds = null
    random_seed = null
    num_models = null
    model_type = 'alphafold2_multimer_v3'
    use_dropout = null
    max_seq = null
    max_extra_seq = null
    max_msa = null
    disable_cluster_profile = null

    // Relaxation arguments
    amber = null
    num_relax = null
    relax_max_iterations = null
    relax_tolerance = null
    relax_max_outer_iterations = null
    use_gpu_relax = null

    // Output arguments
    rank = null
    stop_at_score = null
    save_all = null
    save_recycles = null
    save_single_representations = null
    save_pair_representations = null

    // Advanced arguments
    inf_batch                   = 20 // Number of inference jobs to batch per GPU (Alphafold3, Boltz)
    host_url = 'http://cfold-db:8888' // MSAserver (Colabfold, Boltz)

    // Alphafold3 mode paramaters
    model_dir                   = null
    db_dir                      = '/datasets/bio/alphafold3'
    max_template_date           = '2021-09-30'
    num_recycles                = 10 // Number of recycles for inference
    conformer_max_iterations    = null
    save_distogram              = null
    save_embeddings             = null

    // Boltz mode paramaters (Provides defaults)
    model = null // The model to use for prediction. Options: boltz1|boltz2
    recycling_steps = null // Boltz default: 3, AF3 default:10
    sampling_steps = null // The number of sampling steps to use for prediction
    diffusion_samples = null // Boltz default: 1, AF3 default:20
    step_scale = null // Boltz1: 1.638 Boltz2: 1.5 (null uses default)
    write_full_pae = null
    write_full_pde = null
    output_format = null // Options: pdf|mmcif
    seed = null // Seed to use for random number generator
    use_msa_server = true
    msa_server_url = 'http://cfold-db:8888'
    msa_pairing_strategy = null // Options: greedy|complete
    use_potentials = null // Whether to not use potentials for steering.
    method = null // The method to use for prediction.
    affinity_mw_correction = null // Whether to add the Molecular Weight correction to the affinity value head
    sampling_steps_affinity = null // The number of sampling steps to use for affinity prediction
    diffusion_samples_affinity = null // The number of diffusion samples to use for affinity prediction.
    max_msa_seqs = null // The maximum number of MSA sequences to use for prediction.
    subsample_msa = null // Whether to subsample the MSA.
    num_subsampled_msa = null // The number of MSA sequences to subsample.
    no_kernels = null // Whether to disable the kernels.
    write_embeddings = null // to dump the s and z embeddings into a npz file


    // Config options
    config_profile_name         = null
    config_profile_description  = null
    custom_config_version       = 'master'
    custom_config_base          = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact      = null
    config_profile_url          = null

}

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Load configurations files
includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Local Profiles

profiles {
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    debug {
        cleanup = false
        process {
            errorStrategy = 'terminate'
        }
    }
}

manifest {
    name            = 'baldikacti/chienlab-proteinfold'
    author          = """Berent Aldikacti"""
    homePage        = 'https://github.com/baldikacti/chienlab-proteinfold'
    description     = """Protein 3D structure paired prediction pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.10.0'
    version         = '0.9.0'
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
